{"version":3,"file":"static/js/487.a028f745.chunk.js","mappings":"sQACA,EAAuB,uBAAvB,EAAqD,uBAArD,EAAmF,4CAAnF,EAAsI,uB,mBCkEtI,EA5DiB,WACb,OAAgCA,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QA0BR,OAxBAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAa,IAAIC,gBADX,wCAIZ,2FACIL,EAAU,WADd,kBAG2BM,EAAAA,EAAAA,WAAoBL,GAH/C,OAGcM,EAHd,OAIQT,EAAYS,EAAKC,MAEZD,EAAKC,KAAKC,OACVT,EAAU,YADQA,EAAU,aANzC,gDASQU,QAAQC,IAAI,UAAZ,MATR,0DAJY,sBAmBZ,OAjBAL,EAAAA,EAAAA,OAAkBF,EAAWQ,OAFjB,mCAiBZC,GAEO,WACHT,EAAWU,WAEhB,CAACb,KAGA,gCACgB,YAAXF,IAAwB,SAAC,KAAD,IACb,aAAXA,IACG,eAAIgB,UAAWC,EAAf,SACKnB,EAASoB,KAAI,SAAAT,GAAI,OACd,gBAA2BO,UAAWC,EAAtC,WACI,gBACIE,IACIV,EAAKW,aAAL,yCACwCX,EAAKW,cACvCC,EAEVC,IAAKb,EAAKc,KACVC,MAAM,SAEV,iBAAMR,UAAWC,EAAjB,SAA0BR,EAAKc,SAV1B,OAASd,EAAKgB,SAevB,cAAXzB,IACG,eAAIgB,UAAWC,EAAf,iF","sources":["webpack://goit-react-hw-05-movies/./src/components/CastInfo/CastInfo.module.css?0a17","components/CastInfo/CastInfo.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"CastInfo_list__Pb+aF\",\"item\":\"CastInfo_item__E00bZ\",\"text\":\"CastInfo_text__KYzPL CastInfo_item__E00bZ\",\"name\":\"CastInfo_name__LXyfT\"};","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components';\nimport delivery from 'services/delivery';\nimport s from './CastInfo.module.css';\nimport nofoto from 'images/nofoto.jpg';\n\nconst CastInfo = () => {\n    const [castList, setCastList] = useState([]);\n    const [status, setStatus] = useState('');\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        const controller = new AbortController();\n        delivery.signal = controller.signal;\n\n        async function getInfo() {\n            setStatus('loading');\n            try {\n                const data = await delivery.getCredits(movieId);\n                setCastList(data.cast);\n\n                if (!data.cast.length) setStatus('noResults');\n                else setStatus('resolved');\n            } catch (error) {\n                console.log('error: ', error);\n            }\n        }\n\n        getInfo();\n\n        return () => {\n            controller.abort();\n        };\n    }, [movieId]);\n\n    return (\n        <>\n            {status === 'loading' && <Loader />}\n            {status === 'resolved' && (\n                <ul className={s.list}>\n                    {castList.map(cast => (\n                        <li key={'cast' + cast.id} className={s.item}>\n                            <img\n                                src={\n                                    cast.profile_path\n                                        ? `https://image.tmdb.org/t/p/w200${cast.profile_path}`\n                                        : nofoto\n                                }\n                                alt={cast.name}\n                                width=\"100\"\n                            />\n                            <span className={s.name}>{cast.name}</span>\n                        </li>\n                    ))}\n                </ul>\n            )}\n            {status === 'noResults' && (\n                <h3 className={s.text}>\n                    We don't have information about the cast for this movie\n                    &#9785;\n                </h3>\n            )}\n        </>\n    );\n};\n\nexport default CastInfo;\n"],"names":["useState","castList","setCastList","status","setStatus","movieId","useParams","useEffect","controller","AbortController","delivery","data","cast","length","console","log","signal","getInfo","abort","className","s","map","src","profile_path","nofoto","alt","name","width","id"],"sourceRoot":""}