{"version":3,"file":"static/js/869.5caa676e.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/MovieSearch/MovieSearch.module.css?a4c9","components/MovieSearch/MovieSearch.jsx","services/delivery.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"MovieSearch_container__P+HNv\",\"searchForm\":\"MovieSearch_searchForm__8c7z6\",\"button\":\"MovieSearch_button__LdFnP\",\"icon\":\"MovieSearch_icon__o-0yw\",\"input\":\"MovieSearch_input__ixDAZ\",\"noResults\":\"MovieSearch_noResults__jQn0p\",\"load\":\"MovieSearch_load__6WVqO\",\"spinner\":\"MovieSearch_spinner__swBy2\"};","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { MoviesList } from 'components';\nimport delivery from 'services/delivery';\nimport icons from 'images/icons.svg';\nimport s from './MovieSearch.module.css';\n\nconst MovieSearch = () => {\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [moviesList, setMoviesList] = useState([]);\n    const [status, setStatus] = useState('idle');\n\n    useEffect(() => {\n        const renderGallery = async () => {\n            setStatus('loading');\n            try {\n                const data = await delivery.search();\n                setMoviesList(data.results);\n                if (!data.results.length) setStatus('noResults');\n                else setStatus('resolved');\n            } catch (error) {\n                console.log('error: ', error);\n            }\n        };\n\n        const query = searchParams.get('query');\n        if (delivery.query !== query) {\n            delivery.query = query;\n            query && renderGallery();\n        }\n    }, [searchParams, status]);\n\n    const onSubmit = event => {\n        event.preventDefault();\n        const query = event.target[1].value.trim();\n        event.target[1].value = '';\n        if (!query) setStatus('noQuery');\n        setSearchParams(query ? { query } : {});\n    };\n\n    return (\n        <>\n            <form className={s.searchForm} onSubmit={onSubmit}>\n                <button type=\"submit\" className={s.button}>\n                    {status === 'loading' ? (\n                        <svg className={s.load}>\n                            <use href={`${icons}#load`} />\n                        </svg>\n                    ) : (\n                        <svg className={s.icon}>\n                            <use href={`${icons}#search`} />\n                        </svg>\n                    )}\n                </button>\n\n                <input\n                    className={s.input}\n                    type=\"text\"\n                    autoComplete=\"off\"\n                    autoFocus\n                    placeholder=\"Search movies\"\n                />\n            </form>\n            {status === 'noResults' && (\n                <div className={s.noResults}>\n                    Sorry, there are no movies matching your search query.\n                    Please try again.\n                </div>\n            )}\n\n            {status === 'noQuery' && (\n                <div className={s.noResults}>\n                    You didn't enter anything in the search box. Please try\n                    again.\n                </div>\n            )}\n\n            {status === 'resolved' && <MoviesList list={moviesList} />}\n        </>\n    );\n};\n\nexport default MovieSearch;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'ba6eefe67f978283c5f8594635575ba8';\n\nclass Delivery {\n    #query = '';\n    page = 1;\n\n    set query(newQuery) {\n        this.signal = null;\n        this.page = 1;\n        this.#query = newQuery;\n    }\n\n    get query() {\n        return this.#query;\n    }\n\n    async search() {\n        return await this.#fetch('search/movie');\n    }\n\n    async getTrend() {\n        return await this.#fetch('trending/movie/day');\n    }\n\n    async getMovie(id) {\n        return await this.#fetch(`movie/${id}`);\n    }\n\n    async getCredits(id) {\n        return await this.#fetch(`movie/${id}/credits`);\n    }\n\n    async getReviews(id) {\n        return await this.#fetch(`movie/${id}/reviews`);\n    }\n\n    async #fetch(typeRequest) {\n        const response = await axios.get(typeRequest, {\n            params: {\n                api_key: API_KEY,\n                query: this.#query,\n                page: this.page,\n            },\n            signal: this.signal,\n        });\n        return response.data;\n    }\n}\n\nexport default new Delivery();\n"],"names":["useSearchParams","searchParams","setSearchParams","useState","moviesList","setMoviesList","status","setStatus","useEffect","renderGallery","delivery","data","results","length","console","log","query","get","className","s","onSubmit","event","preventDefault","target","value","trim","type","href","icons","autoComplete","autoFocus","placeholder","list","axios","API_KEY","Delivery","page","this","newQuery","signal","id","typeRequest","params","api_key","response"],"sourceRoot":""}